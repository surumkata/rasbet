[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "accounts.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "History",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "SendingEmail",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "favorites_list",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "follows_list",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Specialist",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "OverwriteStorage",
        "importPath": "config.storage",
        "description": "config.storage",
        "isExtraImport": true,
        "detail": "config.storage",
        "documentation": {}
    },
    {
        "label": "MIMEImage",
        "importPath": "email.mime.image",
        "description": "email.mime.image",
        "isExtraImport": true,
        "detail": "email.mime.image",
        "documentation": {}
    },
    {
        "label": "smtplib,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib.",
        "description": "smtplib.",
        "detail": "smtplib.",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Competition",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Participant",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Sport",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "detail_games",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Participant",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "db_change_gameodd",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Odd",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "game.models",
        "description": "game.models",
        "isExtraImport": true,
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "Bet_game",
        "importPath": "gamble.models",
        "description": "gamble.models",
        "isExtraImport": true,
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "Odd",
        "importPath": "gamble.models",
        "description": "gamble.models",
        "isExtraImport": true,
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "Bet",
        "importPath": "gamble.models",
        "description": "gamble.models",
        "isExtraImport": true,
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "Bet_status",
        "importPath": "gamble.models",
        "description": "gamble.models",
        "isExtraImport": true,
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "gamble.models",
        "description": "gamble.models",
        "isExtraImport": true,
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "gamble.models",
        "description": "gamble.models",
        "isExtraImport": true,
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "change_url_language",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "change_url_language",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "change_url_language",
        "importPath": "main.models",
        "description": "main.models",
        "isExtraImport": true,
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.templatetags.static",
        "description": "django.templatetags.static",
        "isExtraImport": true,
        "detail": "django.templatetags.static",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "importPath": "jobs",
        "description": "jobs",
        "isExtraImport": true,
        "detail": "jobs",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "requests,json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests.json",
        "description": "requests.json",
        "detail": "requests.json",
        "documentation": {}
    },
    {
        "label": "make_aware",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "IntervalTrigger",
        "importPath": "apscheduler.triggers.interval",
        "description": "apscheduler.triggers.interval",
        "isExtraImport": true,
        "detail": "apscheduler.triggers.interval",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('gamble', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payment_method',\n            fields=[\n                ('method', models.CharField(max_length=50, primary_key=True, serialize=False)),",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0002_promotion_deposit_promotion_bet_promotion",
        "description": "accounts.migrations.0002_promotion_deposit_promotion_bet_promotion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('game', '0002_alter_game_game_id'),\n        ('accounts', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Promotion',\n            fields=[\n                ('promo_code', models.CharField(max_length=30, primary_key=True, serialize=False)),",
        "detail": "accounts.migrations.0002_promotion_deposit_promotion_bet_promotion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0003_alter_bet_promotion_applyable_game",
        "description": "accounts.migrations.0003_alter_bet_promotion_applyable_game",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('game', '0002_alter_game_game_id'),\n        ('accounts', '0002_promotion_deposit_promotion_bet_promotion'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bet_promotion',\n            name='applyable_game',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.game', unique=True),",
        "detail": "accounts.migrations.0003_alter_bet_promotion_applyable_game",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0004_alter_promotion_image_path_and_more",
        "description": "accounts.migrations.0004_alter_promotion_image_path_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0003_alter_bet_promotion_applyable_game'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='promotion',\n            name='image_path',\n            field=models.ImageField(upload_to='promotions/images'),\n        ),",
        "detail": "accounts.migrations.0004_alter_promotion_image_path_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0005_alter_promotion_image_path_and_more",
        "description": "accounts.migrations.0005_alter_promotion_image_path_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0004_alter_promotion_image_path_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='promotion',\n            name='image_path',\n            field=models.ImageField(storage=accounts.models.OverwriteStorage(), upload_to='promotions/images'),\n        ),",
        "detail": "accounts.migrations.0005_alter_promotion_image_path_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0006_favoritesports_favoriteparticipants_and_more",
        "description": "accounts.migrations.0006_favoritesports_favoriteparticipants_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('game', '0003_participant_odd_number_betters_alter_game_away_and_more'),\n        ('accounts', '0005_alter_promotion_image_path_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='FavoriteSports',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),",
        "detail": "accounts.migrations.0006_favoritesports_favoriteparticipants_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0007_delete_admin",
        "description": "accounts.migrations.0007_delete_admin",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0006_favoritesports_favoriteparticipants_and_more'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Admin',\n        ),\n    ]",
        "detail": "accounts.migrations.0007_delete_admin",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0008_session_currency_session_language",
        "description": "accounts.migrations.0008_session_currency_session_language",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0007_delete_admin'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='session',\n            name='currency',\n            field=models.CharField(default='€', max_length=1),\n            preserve_default=False,",
        "detail": "accounts.migrations.0008_session_currency_session_language",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0009_followedgames",
        "description": "accounts.migrations.0009_followedgames",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('game', '0003_participant_odd_number_betters_alter_game_away_and_more'),\n        ('accounts', '0008_session_currency_session_language'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='FollowedGames',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0009_followedgames",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0010_alter_followedgames_game",
        "description": "accounts.migrations.0010_alter_followedgames_game",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('game', '0003_participant_odd_number_betters_alter_game_away_and_more'),\n        ('accounts', '0009_followedgames'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='followedgames',\n            name='game',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.game'),",
        "detail": "accounts.migrations.0010_alter_followedgames_game",
        "documentation": {}
    },
    {
        "label": "TransationAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class TransationAdmin(admin.ModelAdmin):\n  list_display = ['user','type']\nclass UserAdmin(admin.ModelAdmin):\n  list_display = ['userID','first_name','last_name','email','birthday','balance']\nclass SpecAdmin(admin.ModelAdmin):\n  list_display = ['specID','userID']\nclass HistoryAdmin(admin.ModelAdmin):\n  list_display = ['bet','user']\nclass PromotionAdmin(admin.ModelAdmin):\n  list_display = ['promo_code','value_restriction','mail_template_path','image_path','limit_date']",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n  list_display = ['userID','first_name','last_name','email','birthday','balance']\nclass SpecAdmin(admin.ModelAdmin):\n  list_display = ['specID','userID']\nclass HistoryAdmin(admin.ModelAdmin):\n  list_display = ['bet','user']\nclass PromotionAdmin(admin.ModelAdmin):\n  list_display = ['promo_code','value_restriction','mail_template_path','image_path','limit_date']\n  def save_model(self,request,obj,form,change):\n    super().save_model(request,obj,form,change)",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "SpecAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class SpecAdmin(admin.ModelAdmin):\n  list_display = ['specID','userID']\nclass HistoryAdmin(admin.ModelAdmin):\n  list_display = ['bet','user']\nclass PromotionAdmin(admin.ModelAdmin):\n  list_display = ['promo_code','value_restriction','mail_template_path','image_path','limit_date']\n  def save_model(self,request,obj,form,change):\n    super().save_model(request,obj,form,change)\n    email_list = []\n    users = User.objects.all()",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "HistoryAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class HistoryAdmin(admin.ModelAdmin):\n  list_display = ['bet','user']\nclass PromotionAdmin(admin.ModelAdmin):\n  list_display = ['promo_code','value_restriction','mail_template_path','image_path','limit_date']\n  def save_model(self,request,obj,form,change):\n    super().save_model(request,obj,form,change)\n    email_list = []\n    users = User.objects.all()\n    for user in users:\n      email_list.append((user.first_name,user.email))",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "PromotionAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class PromotionAdmin(admin.ModelAdmin):\n  list_display = ['promo_code','value_restriction','mail_template_path','image_path','limit_date']\n  def save_model(self,request,obj,form,change):\n    super().save_model(request,obj,form,change)\n    email_list = []\n    users = User.objects.all()\n    for user in users:\n      email_list.append((user.first_name,user.email))\n    mail = SendingEmail('media/'+str(obj.mail_template_path), \"RasBet Promotion\")\n    mail.send(email_list)",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "BetPromotionAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class BetPromotionAdmin(admin.ModelAdmin):\n  list_display = ['promo_code','applyable_game','reward']\nclass DepositPromotionAdmin(admin.ModelAdmin):\n  list_display = ['promo_code','reward','usages','first_deposit_restriction']\nclass FollowedGamesAdmin(admin.ModelAdmin):\n  list_display = ['user','game']\n# Register your models here.\nadmin.site.register(User,UserAdmin)\nadmin.site.register(Specialist,SpecAdmin)\nadmin.site.register(Session)",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "DepositPromotionAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class DepositPromotionAdmin(admin.ModelAdmin):\n  list_display = ['promo_code','reward','usages','first_deposit_restriction']\nclass FollowedGamesAdmin(admin.ModelAdmin):\n  list_display = ['user','game']\n# Register your models here.\nadmin.site.register(User,UserAdmin)\nadmin.site.register(Specialist,SpecAdmin)\nadmin.site.register(Session)\nadmin.site.register(Payment_method)\nadmin.site.register(Transation,TransationAdmin)",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "FollowedGamesAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class FollowedGamesAdmin(admin.ModelAdmin):\n  list_display = ['user','game']\n# Register your models here.\nadmin.site.register(User,UserAdmin)\nadmin.site.register(Specialist,SpecAdmin)\nadmin.site.register(Session)\nadmin.site.register(Payment_method)\nadmin.site.register(Transation,TransationAdmin)\nadmin.site.register(History,HistoryAdmin)\nadmin.site.register(Promotion,PromotionAdmin)",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"accounts\"",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class User(models.Model):\n    userID = models.AutoField(primary_key=True)\n    email = models.EmailField(max_length=200,null=False)\n    password = models.CharField(max_length=10,null=False)\n    birthday = models.DateField(null=False)\n    first_name = models.CharField(max_length=50,null=False)\n    last_name = models.CharField(max_length=50,null=False)\n    balance = models.FloatField(default=0)\n    @classmethod\n    def insert(self,first_name,last_name,email,birthday,password):",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Specialist",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Specialist(models.Model):\n    specID = models.AutoField(primary_key=True)\n    userID = models.ForeignKey(User, on_delete=models.CASCADE)\n    @classmethod\n    def is_specialist(self,id:str):\n        return Specialist.objects.filter(userID=id).exists()\nclass Session(models.Model):\n    user_in_session = models.ForeignKey(User, on_delete=models.CASCADE)\n    login_time = models.DateField(auto_now_add=True)\n    ip_adress = models.CharField(max_length=15,null=False)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Session(models.Model):\n    user_in_session = models.ForeignKey(User, on_delete=models.CASCADE)\n    login_time = models.DateField(auto_now_add=True)\n    ip_adress = models.CharField(max_length=15,null=False)\n    session_id = models.CharField(max_length=32,null=False)\n    currency = models.CharField(max_length=1,null=False)\n    language = models.CharField(max_length=10,null=False)\n    # Create a new session instance\n    @classmethod\n    def create(self,user,request):",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Payment_method",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Payment_method(models.Model):\n        method = models.CharField(primary_key=True,max_length=50)\n# Transations (withdraw or deposit) from user\nclass Transation(models.Model):\n    transationID = models.AutoField(primary_key=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    # Deposit or withdraw\n    type = models.CharField(max_length=50,null=False)\n    # Method of payment\n    method = models.ForeignKey(Payment_method,on_delete=models.CASCADE)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Transation",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Transation(models.Model):\n    transationID = models.AutoField(primary_key=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    # Deposit or withdraw\n    type = models.CharField(max_length=50,null=False)\n    # Method of payment\n    method = models.ForeignKey(Payment_method,on_delete=models.CASCADE)\n    # Transation amount\n    amount = models.FloatField()\n    # Date and time of the operation",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "History",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class History(models.Model):\n    # Compose key betID+userID, history mapss all bets from all users\n    bet  = models.ForeignKey(\"gamble.Bet\",on_delete=models.CASCADE)\n    user = models.ForeignKey(User,on_delete=models.CASCADE, related_name = \"history\")\n    unique_together = ((bet,user))\n    @classmethod\n    def create(self,bet,user):\n        History.objects.create(bet=bet,user=user)\n# Promotions\nclass Promotion(models.Model):",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Promotion",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Promotion(models.Model):\n    promo_code = models.CharField(max_length=30,primary_key=True)\n    # Minimum value to use for the promotion to be aplicable\n    value_restriction = models.FloatField()\n    # Mail template path\n    mail_template_path = models.FileField(upload_to='promotions/template', storage=OverwriteStorage())\n    # Image to use on the website\n    image_path = models.ImageField(upload_to='promotions/images', storage=OverwriteStorage())\n    # Limit to use the promotion\n    limit_date = models.DateTimeField(null=False)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Bet_Promotion",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Bet_Promotion(models.Model):\n    promo_code = models.ForeignKey(Promotion,on_delete=models.CASCADE)\n    #game on which the promotion can be used\n    applyable_game = models.ForeignKey(\"game.Game\",on_delete=models.CASCADE,unique=True)\n    # Reward in percentage\n    reward = models.IntegerField()\n    #Checks if promotion is valid for a specific user\n    def valid(self,amount):\n        promotion = Promotion.objects.get(promo_code=self.promo_code)\n        date_valid = promotion.limit_date >= timezone.now()",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Deposit_Promotion",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Deposit_Promotion(models.Model):\n    promo_code = models.ForeignKey(Promotion,on_delete=models.CASCADE)\n    # Reward in money\n    reward = models.FloatField()\n    # Number of times that promotion can be used\n    usages = models.IntegerField()\n    # Restriction in case of promotion only available on the first deposit\n    first_deposit_restriction = models.BooleanField(null=False)\n    #Checks if promotion is valid for a specific user\n    def valid(self,user,amount):",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "FavoriteSports",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class FavoriteSports(models.Model):\n    id = models.AutoField(primary_key=True)\n    sport = models.ForeignKey(\"game.Sport\",on_delete=models.CASCADE)\n    user = models.ForeignKey(User,on_delete=models.CASCADE)\n    def __str__(self):\n        return str(self.sport)\nclass FavoriteCompetitions(models.Model):\n    id = models.AutoField(primary_key=True)\n    competition = models.ForeignKey(\"game.Competition\",on_delete=models.CASCADE)\n    user = models.ForeignKey(User,on_delete=models.CASCADE)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "FavoriteCompetitions",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class FavoriteCompetitions(models.Model):\n    id = models.AutoField(primary_key=True)\n    competition = models.ForeignKey(\"game.Competition\",on_delete=models.CASCADE)\n    user = models.ForeignKey(User,on_delete=models.CASCADE)\n    def __str__(self):\n        return str(self.competition)\nclass FavoriteParticipants(models.Model):\n    id = models.AutoField(primary_key=True)\n    participant = models.ForeignKey(\"game.Participant\",on_delete=models.CASCADE)\n    user = models.ForeignKey(User,on_delete=models.CASCADE)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "FavoriteParticipants",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class FavoriteParticipants(models.Model):\n    id = models.AutoField(primary_key=True)\n    participant = models.ForeignKey(\"game.Participant\",on_delete=models.CASCADE)\n    user = models.ForeignKey(User,on_delete=models.CASCADE)\n    def __str__(self):\n        return str(self.participant)\nclass FollowedGames(models.Model):\n    user = models.ForeignKey(User,on_delete=models.CASCADE)\n    game = models.ForeignKey(\"game.Game\",on_delete=models.CASCADE)\n    def __str__(self):",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "FollowedGames",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class FollowedGames(models.Model):\n    user = models.ForeignKey(User,on_delete=models.CASCADE)\n    game = models.ForeignKey(\"game.Game\",on_delete=models.CASCADE)\n    def __str__(self):\n        return str(self.user) + \" : \" + str(self.game)\n    def getGamesByUser(user):\n        games = [k.game for k in FollowedGames.objects.filter(user=user)]\n        return detail_games(games,True)\n    def remove(game,user):\n        if FollowedGames.objects.filter(user=user,game=game).exists():",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "SendingEmail",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class SendingEmail:\n    #Set instance variables\n    def __init__(self, template, subject):\n        self.sender_mail = \"rasbetpl32@gmail.com\"\n        self.password = \"zmrbnzoaetikoygo\"\n        self.smtp_server_domain_name = \"smtp.gmail.com\"\n        self.port = 465\n        self.subject = subject\n        self.template = str(template)\n    def write_user_in_template(self, username, template):",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "favorites_list",
        "kind": 2,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "def favorites_list(user):\n    fav_list = {}\n    fav_list['Sport'] = [str(k) for k in FavoriteSports.objects.filter(user=user)]\n    fav_list['Competition'] = [str(k) for k in FavoriteCompetitions.objects.filter(user=user)]\n    #fav_list['Participant'] = [str(k) for k in FavoriteParticipants.objects.filter(user=user)]\n    return fav_list\n#list of a users favorites\ndef follows_list(user):\n    follows = [str(k.game.game_id) for k in FollowedGames.objects.filter(user=user)]\n    return follows",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "follows_list",
        "kind": 2,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "def follows_list(user):\n    follows = [str(k.game.game_id) for k in FollowedGames.objects.filter(user=user)]\n    return follows",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/',views.login,{}),\n    path('logout/',views.logout,{}),\n    path('signup/',views.signup,{}),\n    path('balance/',views.balance,{}),\n    path('deposit/',views.deposit,{}),\n    path('deposit/mbway/',views.mbway,{}),\n    path('deposit/card/',views.card,{}),\n    path('withdraw/',views.withdraw,{}),\n    path('history_bets/',views.history_bets,{}),",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def login(request):\n    if request.method == 'POST':\n        email = request.POST.get('email', False)\n        psw = request.POST['psw']\n        context = {\"error\": False}\n        if User.verify_login(email, psw):\n            u = User.objects.get(email=email)\n            # se ja existe reutiliza a sessao\n            # (talvez o melhor a fazer seja apagar a antiga e criar uma nova,\n            # para n permitir dois dispositivos na mesma conta)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def logout(request):\n    session_id = request.COOKIES.get(\"session\")\n    response = redirect('/')\n    Session.close(session_id)\n    response.delete_cookie('session')\n    return response\ndef signup(request):\n    context = {\"fail\": False}\n    response = render(request, 'signup.html', context)\n    if request.method == 'POST':",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def signup(request):\n    context = {\"fail\": False}\n    response = render(request, 'signup.html', context)\n    if request.method == 'POST':\n        fname = request.POST['fname']\n        lname = request.POST['lname']\n        email = request.POST['email']\n        birthday = request.POST['birthday']\n        psw = request.POST['psw']\n        if not User.insert(fname, lname, email, birthday, psw):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def balance(request):\n    session_id = request.COOKIES.get(\"session\")\n    if session_id:\n        session = Session.objects.get(session_id=session_id)\n        language = session.language\n        context = {\n            \"balance\": session.user_in_session.balance,\n            \"logged\": True,\n            \"id\": session.user_in_session.userID,\n            \"fname\": session.user_in_session.first_name,",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def deposit(request):\n    session_id = request.COOKIES.get(\"session\")\n    if session_id:\n        session = Session.objects.get(session_id=session_id)\n        language = session.language\n        html = change_url_language('deposit',language)\n        response = render(request, html)\n        if request.method == 'POST':\n            exists_promotion = True\n            amount = request.POST.get('amount', False)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "mbway",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def mbway(request):\n    session_id = request.COOKIES.get(\"session\")\n    if session_id:\n        session = Session.objects.get(session_id=session_id)\n        language = session.language\n        html = change_url_language('mbway',language)\n        response = render(request, html)\n        if request.method == 'POST':\n            valid_promotion = True\n            amount = request.session.get('amount', False)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "card",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def card(request):\n    session_id = request.COOKIES.get(\"session\")\n    if session_id:\n        session = Session.objects.get(session_id=session_id)\n        language = session.language\n        html = change_url_language('card',language)\n        response = render(request, html)\n        if request.method == 'POST':\n            valid_promotion = True\n            amount = request.session.get('amount', False)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def withdraw(request):\n    session_id = request.COOKIES.get(\"session\")\n    if session_id:\n        session = Session.objects.get(session_id=session_id)\n        language = session.language\n        html = change_url_language('withdraw',language)\n        context = {\n            \"balance\": session.user_in_session.balance,\n            \"logged\": True,\n            \"id\": session.user_in_session.userID,",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "history_transactions",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def history_transactions(request):\n    session_id = request.COOKIES.get(\"session\")\n    session = Session.objects.get(session_id=session_id)\n    user_transactions_history = Transation.objects.filter(\n        user=session.user_in_session)\n    user_bet_history = History.objects.filter(user=session.user_in_session)\n    transactions = []\n    statistics = {\n        \"deposit\": 0.0,\n        \"withdraw\": 0.0,",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "history_bets",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def history_bets(request):\n    session_id = request.COOKIES.get(\"session\")\n    if session_id:\n        session = Session.objects.get(session_id=session_id)\n        if request.method == 'POST':\n            bet_id = request.POST['bet_id']\n            bet = Bet.objects.get(betID=bet_id)\n            open = Bet_status.objects.get(status=\"open\")\n            if bet.status == open:\n                amount = bet.amount",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "favorites",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def favorites(request):\n    session_id = request.COOKIES.get(\"session\")\n    if session_id:\n        session = Session.objects.get(session_id=session_id)\n        if request.method == 'POST':\n            fav_name = request.POST['fav']\n            type = request.POST['type']\n            if type == \"Sport\":\n                if FavoriteSports.objects.filter(sport=fav_name, user=session.user_in_session).exists():\n                    fav = FavoriteSports.objects.get(",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "followed_games",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def followed_games(request):\n    session_id = request.COOKIES.get(\"session\")\n    if session_id:\n        session = Session.objects.get(session_id=session_id)\n        if request.method == 'POST':\n            game = request.POST['game']\n            FollowedGames.remove(game,session.user_in_session)\n            #delete game followed\n        #buscar jogos e odds seguidos\n        followed = FollowedGames.getGamesByUser(session.user_in_session)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "update_favorite",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def update_favorite(request):\n    if request.method == 'POST':\n        is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'\n        if is_ajax:\n            request_data = json.load(request)\n            cookie = request.COOKIES.get(\"session\")\n            if cookie:\n                session = Session.objects.get(session_id=cookie)\n                if session:\n                    favourited = request_data.get('favorited') == 'True'",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "update_follow",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def update_follow(request):\n    if request.method == 'POST':\n        is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'\n        if is_ajax:\n            request_data = json.load(request)\n            cookie = request.COOKIES.get(\"session\")\n            if cookie:\n                session = Session.objects.get(session_id=cookie)\n                if session:\n                    followed = request_data.get('followed') == 'True'",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def change_password(request):\n    cookie = request.COOKIES.get(\"session\")\n    context = {\n        \"logged\": True,\n    }\n    msg = -1\n    if request.method == 'POST':\n        session = Session.objects.get(session_id=cookie)\n        user_id = session.user_in_session.userID\n        user = User.objects.get(userID=user_id)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def profile(request):\n    cookie = request.COOKIES.get(\"session\")\n    context = {\n        \"logged\": False,\n    }\n    response = render(request, 'profile.html', context)\n    msg = -1\n    if request.method == 'POST':\n        session = Session.objects.get(session_id=cookie)\n        user_id = session.user_in_session.userID",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "promotions",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def promotions(request):\n    cookie = request.COOKIES.get(\"session\")\n    promotions = Promotion.objects.all()\n    context = {\n        \"logged\": False,\n    }\n    promotion_list = []\n    for promotion in promotions:\n        promotion_list.append(promotion.image_path)\n    html = 'promotions.html'",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-!rr^gw-i_m@18nqm54sxz$ho0$!uwwyh!zfrd=@(j)n(uitvq-\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n#So sessions are not stored in db\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-!rr^gw-i_m@18nqm54sxz$ho0$!uwwyh!zfrd=@(j)n(uitvq-\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n#So sessions are not stored in db\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n# Application definition\nINSTALLED_APPS = [\n    \"main.apps.MainConfig\",\n    \"accounts.apps.AccountsConfig\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n#So sessions are not stored in db\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n# Application definition\nINSTALLED_APPS = [\n    \"main.apps.MainConfig\",\n    \"accounts.apps.AccountsConfig\",\n    \"gamble.apps.GambleConfig\",\n    \"game.apps.GameConfig\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n#So sessions are not stored in db\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n# Application definition\nINSTALLED_APPS = [\n    \"main.apps.MainConfig\",\n    \"accounts.apps.AccountsConfig\",\n    \"gamble.apps.GambleConfig\",\n    \"game.apps.GameConfig\",\n    \"django.contrib.admin\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_ENGINE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n# Application definition\nINSTALLED_APPS = [\n    \"main.apps.MainConfig\",\n    \"accounts.apps.AccountsConfig\",\n    \"gamble.apps.GambleConfig\",\n    \"game.apps.GameConfig\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"main.apps.MainConfig\",\n    \"accounts.apps.AccountsConfig\",\n    \"gamble.apps.GambleConfig\",\n    \"game.apps.GameConfig\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"config.urls\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ROOT_URLCONF = \"config.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\"),os.path.join(BASE_DIR, \"static\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\"),os.path.join(BASE_DIR, \"static\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "WSGI_APPLICATION = \"config.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",},\n    {\"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",},\n    {\"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",},\n]\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = False\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [\n        os.path.join(BASE_DIR, 'static')\n        ]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = False\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [\n        os.path.join(BASE_DIR, 'static')\n        ]\n# Default primary key field type",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = False\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [\n        os.path.join(BASE_DIR, 'static')\n        ]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_TZ = False\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [\n        os.path.join(BASE_DIR, 'static')\n        ]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\nSTATICFILES_DIRS = [\n        os.path.join(BASE_DIR, 'static')\n        ]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n        os.path.join(BASE_DIR, 'static')\n        ]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "OverwriteStorage",
        "kind": 6,
        "importPath": "config.storage",
        "description": "config.storage",
        "peekOfCode": "class OverwriteStorage(FileSystemStorage):\n    def get_available_name(self, name,max_length=None):\n        # If the filename already exists, remove it as if it was a true file system\n        if self.exists(name):\n            os.remove(os.path.join(settings.MEDIA_ROOT, name))\n        return name",
        "detail": "config.storage",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/',admin.site.urls),\n    path('',include('main.urls')),\n    path('accounts/', include('accounts.urls')),\n    path('game/', include('game.urls')),\n    path('gamble/', include('gamble.urls')),\n    path('favicon.ico', RedirectView.as_view(url=static('favicon.ico'))),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()\nfrom jobs import scheduler\nscheduler.start()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gamble.migrations.0001_initial",
        "description": "gamble.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('game', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bet',\n            fields=[\n                ('betID', models.AutoField(primary_key=True, serialize=False)),",
        "detail": "gamble.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "gamble.migrations.0002_alter_bet_datetime",
        "description": "gamble.migrations.0002_alter_bet_datetime",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('gamble', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bet',\n            name='datetime',\n            field=models.DateTimeField(auto_now_add=True),\n        ),",
        "detail": "gamble.migrations.0002_alter_bet_datetime",
        "documentation": {}
    },
    {
        "label": "betAdmin",
        "kind": 6,
        "importPath": "gamble.admin",
        "description": "gamble.admin",
        "peekOfCode": "class betAdmin(admin.ModelAdmin):\n  list_display = ['betID','type','amount','datetime']\nclass bet_gameAdmin(admin.ModelAdmin):\n  list_display = ['bet','odd_id','odd','status']\nadmin.site.register(Bet,betAdmin)\nadmin.site.register(Bet_type)\nadmin.site.register(Bet_game,bet_gameAdmin)\nadmin.site.register(Bet_status)",
        "detail": "gamble.admin",
        "documentation": {}
    },
    {
        "label": "bet_gameAdmin",
        "kind": 6,
        "importPath": "gamble.admin",
        "description": "gamble.admin",
        "peekOfCode": "class bet_gameAdmin(admin.ModelAdmin):\n  list_display = ['bet','odd_id','odd','status']\nadmin.site.register(Bet,betAdmin)\nadmin.site.register(Bet_type)\nadmin.site.register(Bet_game,bet_gameAdmin)\nadmin.site.register(Bet_status)",
        "detail": "gamble.admin",
        "documentation": {}
    },
    {
        "label": "GambleConfig",
        "kind": 6,
        "importPath": "gamble.apps",
        "description": "gamble.apps",
        "peekOfCode": "class GambleConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"gamble\"",
        "detail": "gamble.apps",
        "documentation": {}
    },
    {
        "label": "Bet_type",
        "kind": 6,
        "importPath": "gamble.models",
        "description": "gamble.models",
        "peekOfCode": "class Bet_type(models.Model):\n    type = models.CharField(primary_key=True,max_length=50)\n    def __str__(self):\n        return self.type\n    def str(self):\n        return  self.type\nclass Bet_status(models.Model):\n    status = models.CharField(primary_key=True,max_length=10)\n    def __str__(self):\n        return self.status",
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "Bet_status",
        "kind": 6,
        "importPath": "gamble.models",
        "description": "gamble.models",
        "peekOfCode": "class Bet_status(models.Model):\n    status = models.CharField(primary_key=True,max_length=10)\n    def __str__(self):\n        return self.status\n    def str(self):\n        return  self.status\n    class Meta:\n        verbose_name_plural = 'Bet_status'\nclass Bet(models.Model):\n    betID = models.AutoField(primary_key=True)",
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "Bet",
        "kind": 6,
        "importPath": "gamble.models",
        "description": "gamble.models",
        "peekOfCode": "class Bet(models.Model):\n    betID = models.AutoField(primary_key=True)\n    # Speficy type of bet\n    type = models.ForeignKey(Bet_type, on_delete=models.CASCADE)\n    # Amount of money\n    amount = models.FloatField()\n    # Datetime of the bet\n    datetime = models.DateTimeField(auto_now_add=True)\n    # Status of the bet, open, won or lost\n    status = models.ForeignKey(Bet_status, on_delete=models.CASCADE)",
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "Bet_game",
        "kind": 6,
        "importPath": "gamble.models",
        "description": "gamble.models",
        "peekOfCode": "class Bet_game(models.Model):\n    bet = models.ForeignKey(Bet, on_delete=models.CASCADE)\n    odd_id = models.ForeignKey(Odd, on_delete=models.CASCADE,default=\"\")\n    status = models.ForeignKey(Bet_status, on_delete=models.CASCADE)\n    odd = models.FloatField()\n    @classmethod\n    def create(self,bet,odd_id,odd):\n        status = Bet_status.objects.get(status='open')\n        Bet_game.objects.create(bet=bet,odd_id=odd_id,odd=odd,status=status)\n    def turn_won(self):",
        "detail": "gamble.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "gamble.urls",
        "description": "gamble.urls",
        "peekOfCode": "urlpatterns = [\n    path('bet/',views.bet,{}),\n]",
        "detail": "gamble.urls",
        "documentation": {}
    },
    {
        "label": "bet",
        "kind": 2,
        "importPath": "gamble.views",
        "description": "gamble.views",
        "peekOfCode": "def bet(request):\n    if request.method == \"POST\":\n         is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'\n    if is_ajax:\n        request_data = json.load(request)\n        cookie = request.COOKIES.get(\"session\")\n        if cookie:\n            session = Session.objects.get(session_id=cookie)\n            if session:\n                slip = request_data.get('slip')",
        "detail": "gamble.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "game.migrations.0001_initial",
        "description": "game.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Competition',\n            fields=[\n                ('competition', models.CharField(max_length=50, primary_key=True, serialize=False)),\n            ],",
        "detail": "game.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "game.migrations.0002_alter_game_game_id",
        "description": "game.migrations.0002_alter_game_game_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('game', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='game',\n            name='game_id',\n            field=models.AutoField(primary_key=True, serialize=False),\n        ),",
        "detail": "game.migrations.0002_alter_game_game_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "game.migrations.0003_participant_odd_number_betters_alter_game_away_and_more",
        "description": "game.migrations.0003_participant_odd_number_betters_alter_game_away_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('game', '0002_alter_game_game_id'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Participant',\n            fields=[\n                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),\n                ('is_team', models.BooleanField()),",
        "detail": "game.migrations.0003_participant_odd_number_betters_alter_game_away_and_more",
        "documentation": {}
    },
    {
        "label": "gameAdmin",
        "kind": 6,
        "importPath": "game.admin",
        "description": "game.admin",
        "peekOfCode": "class gameAdmin(admin.ModelAdmin):\n  list_display = ['sport','home','away','state']\n  actions = ['turn_close','turn_suspend']\n  def save_model(self,request,obj,form,change):\n    super().save_model(request,obj,form,change)\n    Odd.home(obj,1.0)\n    Odd.away(obj,1.0)\n    Odd.draw(obj,1.0) \n  @admin.action(description='Mark selected games as closed')\n  def turn_close(self,request, queryset):",
        "detail": "game.admin",
        "documentation": {}
    },
    {
        "label": "oddAdmin",
        "kind": 6,
        "importPath": "game.admin",
        "description": "game.admin",
        "peekOfCode": "class oddAdmin(admin.ModelAdmin):\n  list_display = ['game','odd_type','odd','happened','number_betters']\nadmin.site.register(Sport)\nadmin.site.register(State)\nadmin.site.register(Odd_type)\nadmin.site.register(Game,gameAdmin)\nadmin.site.register(Odd,oddAdmin)\nadmin.site.register(Country)\nadmin.site.register(Competition)\nadmin.site.register(Participant)",
        "detail": "game.admin",
        "documentation": {}
    },
    {
        "label": "GameConfig",
        "kind": 6,
        "importPath": "game.apps",
        "description": "game.apps",
        "peekOfCode": "class GameConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"game\"",
        "detail": "game.apps",
        "documentation": {}
    },
    {
        "label": "Sport",
        "kind": 6,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "class Sport(models.Model):\n    sport = models.CharField(primary_key=True,max_length=50,null=False)\n    has_draw = models.BooleanField()\n    is_team_sport = models.BooleanField()\n    def __str__(self):\n        return self.sport\n# on_hold | open | suspended | closed\nclass State(models.Model):\n    state = models.CharField(primary_key=True,max_length=50,null=False)\n    def __str__(self):",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "class State(models.Model):\n    state = models.CharField(primary_key=True,max_length=50,null=False)\n    def __str__(self):\n        return self.state\n    def str(self):\n        return self.state\n# home | away | draw ...\nclass Odd_type(models.Model):\n    type = models.CharField(primary_key=True,max_length=50,null=False)\n    def __str__(self):",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Odd_type",
        "kind": 6,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "class Odd_type(models.Model):\n    type = models.CharField(primary_key=True,max_length=50,null=False)\n    def __str__(self):\n        return self.type\nclass Country(models.Model):\n    country = models.CharField(primary_key=True,max_length=50,null=False)\n    def __str__(self):\n        return self.country\nclass Competition(models.Model):\n    competition = models.CharField(primary_key=True,max_length=50,null=False)",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Country",
        "kind": 6,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "class Country(models.Model):\n    country = models.CharField(primary_key=True,max_length=50,null=False)\n    def __str__(self):\n        return self.country\nclass Competition(models.Model):\n    competition = models.CharField(primary_key=True,max_length=50,null=False)\n    country = models.ForeignKey(Country, on_delete=models.CASCADE)\n    sport = models.ForeignKey(Sport, on_delete=models.CASCADE)\n    def __str__(self):\n        return self.competition",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Competition",
        "kind": 6,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "class Competition(models.Model):\n    competition = models.CharField(primary_key=True,max_length=50,null=False)\n    country = models.ForeignKey(Country, on_delete=models.CASCADE)\n    sport = models.ForeignKey(Sport, on_delete=models.CASCADE)\n    def __str__(self):\n        return self.competition\nclass Participant(models.Model):\n    name = models.CharField(primary_key=True,max_length=50,null=False)\n    is_team = models.BooleanField()\n    def __str__(self):",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Participant",
        "kind": 6,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "class Participant(models.Model):\n    name = models.CharField(primary_key=True,max_length=50,null=False)\n    is_team = models.BooleanField()\n    def __str__(self):\n        return self.name\nclass Game(models.Model):\n    game_id = models.AutoField(primary_key=True)\n    # Specify what kind of sport\n    sport = models.ForeignKey(Sport, on_delete=models.CASCADE)\n    country = models.ForeignKey(Country, on_delete=models.CASCADE)",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "class Game(models.Model):\n    game_id = models.AutoField(primary_key=True)\n    # Specify what kind of sport\n    sport = models.ForeignKey(Sport, on_delete=models.CASCADE)\n    country = models.ForeignKey(Country, on_delete=models.CASCADE)\n    competition = models.ForeignKey(Competition, on_delete=models.CASCADE)\n    state = models.ForeignKey(State, on_delete=models.CASCADE)\n    home = models.ForeignKey(Participant, on_delete=models.CASCADE,related_name='home')\n    away = models.ForeignKey(Participant, on_delete=models.CASCADE,related_name='away')\n    home_score = models.IntegerField(default=0)",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "Odd",
        "kind": 6,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "class Odd(models.Model):\n    game = models.ForeignKey(Game, on_delete=models.CASCADE)\n    odd_type = models.ForeignKey(Odd_type, on_delete=models.CASCADE)\n    odd = models.FloatField()\n    happened = models.BooleanField(default=False)\n    number_betters = models.IntegerField(default=0)\n    @classmethod\n    # Create odd to the outcome home team wins\n    def home(self,game,odd):\n        type = Odd_type.objects.get(type=\"home\")",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "detail_games",
        "kind": 2,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "def detail_games(games,ordered_by_nb):\n    games_dict = {}\n    datetimes = set()\n    for g in games:\n        details = open_game_details(g)\n        if details!={}:\n            datetime = g.datetime.date().strftime(\"%Y/%m/%d\")\n            datetimes.add(datetime)\n            if datetime in games_dict:\n                games_dict[datetime].append(details)",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 2,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "def game_details(game:dict):\n    odds = Odd.objects.filter(game_id=game['game_id'])\n    game = Game.objects.get(game_id=game['game_id'])\n    sport = str(game.sport)\n    country = str(game.country)\n    competition = str(game.competition)\n    state = str(game.state)\n    game_dict = {}\n    game_dict[\"game\"] = game\n    for odd_obj in odds:",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "open_game_details",
        "kind": 2,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "def open_game_details(game):\n    odds = Odd.objects.filter(game_id=game.game_id)\n    game = Game.objects.get(game_id=game.game_id)\n    if game.state.str() == \"open\":\n        game_dict = {}\n        details = {\n            \"sport\" : game.sport,\n            \"competition\" : game.competition,\n            \"country\" : game.country,\n            \"home\" : game.home,",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "take_number_betters",
        "kind": 2,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "def take_number_betters(elem):\n    return elem[\"nb\"]\ndef take_datetime(elem):\n    return elem[\"game\"][\"datetime\"]\n#list of the sports, countries that have it and respective competitions\ndef sports_list():\n    sports = Sport.objects.all()\n    sports_listing = {}\n    countrys = Country.objects.all()\n    for sport in sports:",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "take_datetime",
        "kind": 2,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "def take_datetime(elem):\n    return elem[\"game\"][\"datetime\"]\n#list of the sports, countries that have it and respective competitions\ndef sports_list():\n    sports = Sport.objects.all()\n    sports_listing = {}\n    countrys = Country.objects.all()\n    for sport in sports:\n        sport_name = sport.sport\n        sports_listing[sport_name] = {}",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "sports_list",
        "kind": 2,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "def sports_list():\n    sports = Sport.objects.all()\n    sports_listing = {}\n    countrys = Country.objects.all()\n    for sport in sports:\n        sport_name = sport.sport\n        sports_listing[sport_name] = {}\n        for country in countrys:\n            country_name = country.country\n            sports_listing[sport_name][country_name] = [str(k) for k in Competition.objects.filter(sport=sport,country=country)] ",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "db_change_gamestate",
        "kind": 2,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "def db_change_gamestate(game_id,state):\n    try:\n        if(Game.exists(game_id)):\n            g = Game.objects.get(game_id=game_id)\n            if(state == 'open'):\n                g.open()\n                g.save()\n            elif(state == 'closed'):\n                g.close()\n                g.save()",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "db_change_gameodd",
        "kind": 2,
        "importPath": "game.models",
        "description": "game.models",
        "peekOfCode": "def db_change_gameodd(game_id,value,odd_type):\n    try:\n        odd_type = Odd_type.objects.get(type=odd_type)\n        if Odd.objects.filter(game=game_id,odd_type=odd_type).exists():\n            odd = Odd.objects.get(game=game_id,odd_type=odd_type)\n            odd.change_odd(float(value))\n            odd.save()\n        else:\n            Odd.create(game_id,odd_type,float(value))\n    except Exception as e:",
        "detail": "game.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "game.urls",
        "description": "game.urls",
        "peekOfCode": "urlpatterns = [\n    path('filter/',views.filter,{}),\n    path('filter_specialist/',views.filter_specialist,{}),\n    path('specialist_update_games/',views.specialist_update_games,{}),\n]",
        "detail": "game.urls",
        "documentation": {}
    },
    {
        "label": "filter",
        "kind": 2,
        "importPath": "game.views",
        "description": "game.views",
        "peekOfCode": "def filter(request):\n    if request.method == 'GET':\n        sport = request.GET.get('sport')\n        competition = request.GET.get('competition')\n        participant = request.GET.get('participant')\n        order_by_nb = request.GET.get('order_by_nb')\n        get = {\n                \"sport\" : sport,\n                \"competition\" : competition,\n                \"participant\" : participant,",
        "detail": "game.views",
        "documentation": {}
    },
    {
        "label": "filter_specialist",
        "kind": 2,
        "importPath": "game.views",
        "description": "game.views",
        "peekOfCode": "def filter_specialist(request):\n    cookie = request.COOKIES.get(\"session\")\n    session = Session.objects.get(session_id=cookie)\n    if request.method == 'GET':\n        sport = request.GET.get('sport')\n        competition = request.GET.get('competition')\n        if sport or competition:\n            on_hold = State.objects.get(state=\"on_hold\")\n            open = State.objects.get(state=\"open\")\n            if sport: ",
        "detail": "game.views",
        "documentation": {}
    },
    {
        "label": "specialist_update_games",
        "kind": 2,
        "importPath": "game.views",
        "description": "game.views",
        "peekOfCode": "def specialist_update_games(request):\n    response = redirect(\"/\")\n    cookie = request.COOKIES.get(\"session\")\n    if cookie:\n        session = Session.objects.get(session_id=cookie)\n        if request.method == \"POST\":\n            is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'\n            if is_ajax:\n                request_data = json.load(request)\n                games = request_data.get('games')",
        "detail": "game.views",
        "documentation": {}
    },
    {
        "label": "load_ucras",
        "kind": 2,
        "importPath": "jobs.jobs",
        "description": "jobs.jobs",
        "peekOfCode": "def load_ucras():\n    print(\"Running job: load_ucras\")\n    url = \"http://ucras.di.uminho.pt/v1/games/\"\n    games = requests.get(url).json()\n    if not Sport.objects.filter(sport=\"Football\").exists():\n        Sport.objects.create(sport=\"Football\",has_draw=True,is_team_sport=True)\n    if not Country.objects.filter(country=\"Portugal\").exists():\n        Country.objects.create(country=\"Portugal\")\n    if not Competition.objects.filter(competition=\"Primeira Liga\").exists():\n        sport = Sport.objects.get(sport=\"Football\")",
        "detail": "jobs.jobs",
        "documentation": {}
    },
    {
        "label": "close_started_games",
        "kind": 2,
        "importPath": "jobs.jobs",
        "description": "jobs.jobs",
        "peekOfCode": "def close_started_games():\n    print(\"Running job: suspending started games\")\n    games = Game.objects.filter(datetime__lte=datetime.now())\n    for game in games:\n        game.suspend()\n        game.save()",
        "detail": "jobs.jobs",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "jobs.scheduler",
        "description": "jobs.scheduler",
        "peekOfCode": "def start():\n    sheduler = BackgroundScheduler()\n    sheduler.add_job(load_ucras,IntervalTrigger(seconds=10),max_instances = 1)\n    sheduler.add_job(close_started_games,IntervalTrigger(seconds=3),max_instances = 1)\n    sheduler.start()",
        "detail": "jobs.scheduler",
        "documentation": {}
    },
    {
        "label": "MainConfig",
        "kind": 6,
        "importPath": "main.apps",
        "description": "main.apps",
        "peekOfCode": "class MainConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"main\"",
        "detail": "main.apps",
        "documentation": {}
    },
    {
        "label": "change_url_language",
        "kind": 2,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "def change_url_language(html,language):\n  if language != 'en':\n    return f'{html}_{language}.html'\n  else:\n    return f'{html}.html'",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main.urls",
        "description": "main.urls",
        "peekOfCode": "urlpatterns = [\n    path('',views.home,{}),\n    path('change_language',views.change_language,{}),\n]",
        "detail": "main.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def home(request):\n    cookie = request.COOKIES.get(\"session\")\n    # get all games\n    ordered_by_nb = False\n    games = Game.objects.all()\n    games = detail_games(games,ordered_by_nb)\n    games = OrderedDict(sorted(games.items()))\n    # ORDERNAR POR MAIS APOSTADOS main_listing.sort(key=takeNB,reverse=True)\n    sports_listing = sports_list()\n    print(sports_listing)",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "change_language",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def change_language(request):\n    if request.method == \"POST\":\n        is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'\n    if is_ajax:\n        request_data = json.load(request)\n        cookie = request.COOKIES.get(\"session\")\n        if cookie:\n            session = Session.objects.get(session_id=cookie)\n            if session:\n                new_language= request_data.get('language')",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]